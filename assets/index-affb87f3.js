var l=Object.defineProperty;var m=(s,e,t)=>e in s?l(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var r=(s,e,t)=>(m(s,typeof e!="symbol"?e+"":e,t),t);const n=window.TMap;class u{constructor(e,t){r(this,"marker");r(this,"map");r(this,"geometries");this.map=e,this.geometries=[],this.initMarkerData(t)}initMarkerData(e){if(this.marker=new n.MultiMarker({id:(e==null?void 0:e.markerLayerId)??"marker-layer",map:this.map}),e)for(const t in e)this.update(e[t]);this.geometries=this.marker.geometries}update(e){const t=e.name||e.id;this.marker.styles.hasOwnProperty(t)||this.setStyle(e,t),this.marker.updateGeometries([{...e,position:new n.LatLng(e.position[1],e.position[0]),content:e.name}])}setStyle(e,t){const i=this.marker.styles.default,o={anchor:{x:17,y:23},size:18,direction:"bottom",offset:{x:0,y:0},strokeColor:"#65BBE0",strokeWidth:100,...e},c=new n.MarkerStyle({src:(e==null?void 0:e.icon)??i.src,width:42,height:48,color:"#fff",...o});this.marker.styles[t]=c}remove(e){e&&(this.marker.remove([e]),this.geometries=this.marker.geometries)}reset(){this.marker&&this.marker.setMap(null),this.marker=null,this.geometries=[]}}const d=window.TMap;class p extends d.DOMOverlay{constructor(t){super(t);r(this,"content");r(this,"map");r(this,"position");this.map=t.map,this.content=t.content,this.position=t.position}onInit(t){this.content=t.content,this.position=t.position}onDestroy(){this.dom.removeEventListener("touchend",this.onTouchend),this.dom.removeEventListener("click",this.onClick),this.removeAllListeners()}onClick(){this.emit("click")}onTouchend(){this.emit("touchend")}createDOM(){const t=document.createElement("div");return t.classList.add("clusterBubble"),t.innerText=this.content,t.style.cssText=["width: 46px;","height: 52px;","line-height: 46px;"].join(" "),this.onClick=this.onClick.bind(this),t.addEventListener("click",this.onClick),this.onTouchend=this.onTouchend.bind(this),t.addEventListener("touchend",this.onTouchend),t}updateDOM(){if(!this.map)return;const t=this.map.projectToContainer(this.position),i=t.getX()-this.dom.clientWidth/2+"px",o=t.getY()-this.dom.clientHeight/2+"px";this.dom.style.transform=`translate(${i}, ${o})`,this.emit("dom_updated")}}const a=window.TMap;class k{constructor(e,t){r(this,"markerCluster");r(this,"map");r(this,"geometries");r(this,"clusterBubbleList");r(this,"markerGeometries");r(this,"marker");this.map=e,this.marker=t,this.geometries=[],this.clusterBubbleList=[],this.markerGeometries=[],this.initMarkerData(t.geometries)}initMarkerData(e){for(const t in e)this.geometries.push({...e[t],position:new a.LatLng(e[t].position.lat,e[t].position.lng)});this.markerCluster=new a.MarkerCluster({id:"markerCluster-layer",map:this.map,geometries:this.geometries,enableDefaultStyle:!1,minimumClusterSize:3,zoomOnClick:!0,gridSize:90,averageCenter:!1}),this.markerCluster.on("cluster_changed",()=>{this.clusterBubbleList.length&&(this.clusterBubbleList.forEach(function(i){i.destroy()}),this.clusterBubbleList=[]),this.markerGeometries=[],this.markerCluster.getClusters().forEach(i=>{if(i.geometries.length>2){const o=new p({map:this.map,position:i.center,content:i.geometries.length});o.on("click",()=>{this.map.fitBounds(i.bounds)}),o.on("touchend",()=>{this.map.fitBounds(i.bounds)}),this.clusterBubbleList.push(o)}else this.markerGeometries.push({...i.geometries[0],styleId:i.geometries[0].name})}),this.marker.marker.setGeometries(this.markerGeometries)})}reset(){this.markerCluster&&this.markerCluster.setMap(null),this.markerCluster=null,this.clusterBubbleList.forEach(e=>{e.setMap(null)}),this.clusterBubbleList=[],this.geometries=[],this.marker=null,this.markerGeometries=[]}}const h={};function b(s,e){const t=new u(s,e??""),i=new k(s,t??"");return h.marker=t,h.markerCluster=i,h}const f=s=>{s.marker.reset(),s.markerCluster.reset()},C=s=>{s.marker.reset(),s.markerCluster.reset()};export{u as M,b as c,C as r,f as s};
